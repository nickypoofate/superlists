to activate virtual environment:

source virtualenv/bin/activate

to deactivate virtual environment

deactivate

functional_test.py ==
start selnium webdriver to open a firefox browser window
open localhost
check to see it has Django in the title

django-admin.py startproject superlists . ==
creates file called manage.py and a subfolder called superlists
superlists is for stuff that applies to the whole project.

manage.py is Django's swiss army knife

python3 manage.py runserver (./manage.py runserver)  ==
start django server

git init . ==
start version control with git

.gitignore ==
ignores files (sql folder, geckodriver, virtual environment)
(echo "db.sqlite3" >> .gitignore) syntax
$ git rm -r --cached superlists/__pycache__
rm 'superlists/__pycache__/__init__.cpython-37.pyc'
rm 'superlists/__pycache__/settings.cpython-37.pyc'
rm 'superlists/__pycache__/urls.cpython-37.pyc'
rm 'superlists/__pycache__/wsgi.cpython-37.pyc'
$ echo "__pycache__" >> .gitignore
$ echo "*.pyc" >> .gitignore

functional test == acceptance test == end-to-end test

python3 manage.py startapp lists (or whatever the name of yer app is)

functional tests test the app from the outside.
unit tests test the app from the inside.

python3 manage.py test ==
run tests written in test.py

resolve is the func that django uses to resolve urls and find what view
function they should map to.  check that resolve when called with '/' finds
a function called home_page

httprequest object is what django sees when a users browser asks for a page

response is an instance of a class called httpresponse

the .content of the response are raw bytes. decode() with utf8 to convert to 
a human readable format

git log --oneline to show what you've done

running the django dev server
	python3 manage.py runserver
running functional tests
	python3 functional_tests.py
running the unit tests
	python3 manage.py test

the unit-test/code cycle
	1) run the unit tests in the terminal
	2) make a minimal code change in the editor
	3) repeat!

selenium methods: find_element_by_tag_name, find_element_by_id, 
	find_elements_by_tag_name
send_keys - seleniums way of typing into input elements

Keys class lets us send special keys

time.sleep makes sure browser has finished loading before we make any assertions
about the new page. Explicit wait

form set up to add new items using POST

simple model in database to save list items

database migrations (python3 manage.py makemigrations) (python3 manage.py migrate)

django template tags
  csrf_token
  {% for ... endfor %}

to run the functional tests
  python3 manage.py test functional_tests

to run the unit tests
  python manage.py test lists


Ensure test isolation and manage global state
  different tests shouldn't affect one another

Avoid 'voodoo' sleeps
  time.sleep -- the length of time is always a shot in the dark.  either too
  short, or toow long.  Prefer a retry loop that polls our appand moves on
  asap

don't rely on selenium's implicit waits.
